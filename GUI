# -*- coding: utf-8 -*-
"""

@author: Abhinav Sharma

_/﹋\_
(҂`_´)
<,︻╦╤─ ҉ - -
_/﹋\_                                                       
"""

import tkinter as tk
from tkinter import filedialog
from PIL import ImageTk, Image
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model

# Load the trained model
model = load_model('D:\Output\path_to_saved_model2.h5')

# Create the GUI application
root = tk.Tk()
root.title("Fracture Detector")
root.geometry("400x450")

# Function to classify the image
def classify_image():
    file_path = filedialog.askopenfilename(filetypes=[("Image Files", "*.jpg *.jpeg *.png")])
    if file_path:
        try:
            image = Image.open(file_path)
            image = image.convert("RGB")  # Convert to RGB mode
            image = image.resize((224, 224))
            image = np.array(image) / 255.0
            image = np.expand_dims(image, axis=0)
            prediction = model.predict(image)
            if prediction[0][0] > 0.5:
                result_label.config(text="Fractured")
            else:
                result_label.config(text="Not Fractured")

            # Display the selected image
            img = Image.open(file_path)
            img = img.resize((200, 200))
            img = ImageTk.PhotoImage(img)
            image_label.config(image=img)
            image_label.image = img  # Keep a reference to prevent image from garbage collection

        except (OSError, IOError, AttributeError):
            result_label.config(text="Error: Invalid file")

# Create the GUI elements
upload_button = tk.Button(root, text="Upload Image", command=classify_image)
upload_button.grid(row=0, column=0, pady=20, sticky="N")

image_label = tk.Label(root)
image_label.grid(row=1, column=0, pady=10)

result_label = tk.Label(root, text="")
result_label.grid(row=2, column=0)

# Configure row 1 to expand vertically
root.grid_rowconfigure(1, weight=1)

# Configure column 0 to expand horizontally
root.grid_columnconfigure(0, weight=1)

# Run the GUI application
root.mainloop()
